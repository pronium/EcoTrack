// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: calculator.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImpactCalculatorServiceClient is the client API for ImpactCalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImpactCalculatorServiceClient interface {
	CalculateCarbonFootprint(ctx context.Context, in *CalculateCarbonFootprintRequest, opts ...grpc.CallOption) (*CalculateCarbonFootprintResponse, error)
	GetUserImpact(ctx context.Context, in *GetUserImpactRequest, opts ...grpc.CallOption) (*GetUserImpactResponse, error)
	GetGroupImpact(ctx context.Context, in *GetGroupImpactRequest, opts ...grpc.CallOption) (*GetGroupImpactResponse, error)
	GetUserLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	GetGroupLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	DonateToCause(ctx context.Context, in *DonateToCauseRequest, opts ...grpc.CallOption) (*DonateToCauseResponse, error)
	GetUserDonations(ctx context.Context, in *GetUserDonationsRequest, opts ...grpc.CallOption) (*GetUserDonationsResponse, error)
	GetDonationCauses(ctx context.Context, in *GetDonationCausesRequest, opts ...grpc.CallOption) (*GetDonationCausesResponse, error)
}

type impactCalculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImpactCalculatorServiceClient(cc grpc.ClientConnInterface) ImpactCalculatorServiceClient {
	return &impactCalculatorServiceClient{cc}
}

func (c *impactCalculatorServiceClient) CalculateCarbonFootprint(ctx context.Context, in *CalculateCarbonFootprintRequest, opts ...grpc.CallOption) (*CalculateCarbonFootprintResponse, error) {
	out := new(CalculateCarbonFootprintResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/CalculateCarbonFootprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorServiceClient) GetUserImpact(ctx context.Context, in *GetUserImpactRequest, opts ...grpc.CallOption) (*GetUserImpactResponse, error) {
	out := new(GetUserImpactResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/GetUserImpact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorServiceClient) GetGroupImpact(ctx context.Context, in *GetGroupImpactRequest, opts ...grpc.CallOption) (*GetGroupImpactResponse, error) {
	out := new(GetGroupImpactResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/GetGroupImpact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorServiceClient) GetUserLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/GetUserLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorServiceClient) GetGroupLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/GetGroupLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorServiceClient) DonateToCause(ctx context.Context, in *DonateToCauseRequest, opts ...grpc.CallOption) (*DonateToCauseResponse, error) {
	out := new(DonateToCauseResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/DonateToCause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorServiceClient) GetUserDonations(ctx context.Context, in *GetUserDonationsRequest, opts ...grpc.CallOption) (*GetUserDonationsResponse, error) {
	out := new(GetUserDonationsResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/GetUserDonations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorServiceClient) GetDonationCauses(ctx context.Context, in *GetDonationCausesRequest, opts ...grpc.CallOption) (*GetDonationCausesResponse, error) {
	out := new(GetDonationCausesResponse)
	err := c.cc.Invoke(ctx, "/protos.ImpactCalculatorService/GetDonationCauses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpactCalculatorServiceServer is the server API for ImpactCalculatorService service.
// All implementations must embed UnimplementedImpactCalculatorServiceServer
// for forward compatibility
type ImpactCalculatorServiceServer interface {
	CalculateCarbonFootprint(context.Context, *CalculateCarbonFootprintRequest) (*CalculateCarbonFootprintResponse, error)
	GetUserImpact(context.Context, *GetUserImpactRequest) (*GetUserImpactResponse, error)
	GetGroupImpact(context.Context, *GetGroupImpactRequest) (*GetGroupImpactResponse, error)
	GetUserLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	GetGroupLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	DonateToCause(context.Context, *DonateToCauseRequest) (*DonateToCauseResponse, error)
	GetUserDonations(context.Context, *GetUserDonationsRequest) (*GetUserDonationsResponse, error)
	GetDonationCauses(context.Context, *GetDonationCausesRequest) (*GetDonationCausesResponse, error)
	mustEmbedUnimplementedImpactCalculatorServiceServer()
}

// UnimplementedImpactCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImpactCalculatorServiceServer struct {
}

func (UnimplementedImpactCalculatorServiceServer) CalculateCarbonFootprint(context.Context, *CalculateCarbonFootprintRequest) (*CalculateCarbonFootprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCarbonFootprint not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) GetUserImpact(context.Context, *GetUserImpactRequest) (*GetUserImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserImpact not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) GetGroupImpact(context.Context, *GetGroupImpactRequest) (*GetGroupImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupImpact not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) GetUserLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLeaderboard not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) GetGroupLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupLeaderboard not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) DonateToCause(context.Context, *DonateToCauseRequest) (*DonateToCauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DonateToCause not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) GetUserDonations(context.Context, *GetUserDonationsRequest) (*GetUserDonationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDonations not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) GetDonationCauses(context.Context, *GetDonationCausesRequest) (*GetDonationCausesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationCauses not implemented")
}
func (UnimplementedImpactCalculatorServiceServer) mustEmbedUnimplementedImpactCalculatorServiceServer() {
}

// UnsafeImpactCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpactCalculatorServiceServer will
// result in compilation errors.
type UnsafeImpactCalculatorServiceServer interface {
	mustEmbedUnimplementedImpactCalculatorServiceServer()
}

func RegisterImpactCalculatorServiceServer(s grpc.ServiceRegistrar, srv ImpactCalculatorServiceServer) {
	s.RegisterService(&ImpactCalculatorService_ServiceDesc, srv)
}

func _ImpactCalculatorService_CalculateCarbonFootprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCarbonFootprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).CalculateCarbonFootprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/CalculateCarbonFootprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).CalculateCarbonFootprint(ctx, req.(*CalculateCarbonFootprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculatorService_GetUserImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserImpactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).GetUserImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/GetUserImpact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).GetUserImpact(ctx, req.(*GetUserImpactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculatorService_GetGroupImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupImpactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).GetGroupImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/GetGroupImpact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).GetGroupImpact(ctx, req.(*GetGroupImpactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculatorService_GetUserLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).GetUserLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/GetUserLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).GetUserLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculatorService_GetGroupLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).GetGroupLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/GetGroupLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).GetGroupLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculatorService_DonateToCause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonateToCauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).DonateToCause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/DonateToCause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).DonateToCause(ctx, req.(*DonateToCauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculatorService_GetUserDonations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDonationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).GetUserDonations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/GetUserDonations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).GetUserDonations(ctx, req.(*GetUserDonationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculatorService_GetDonationCauses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonationCausesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServiceServer).GetDonationCauses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ImpactCalculatorService/GetDonationCauses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServiceServer).GetDonationCauses(ctx, req.(*GetDonationCausesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImpactCalculatorService_ServiceDesc is the grpc.ServiceDesc for ImpactCalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImpactCalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ImpactCalculatorService",
	HandlerType: (*ImpactCalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateCarbonFootprint",
			Handler:    _ImpactCalculatorService_CalculateCarbonFootprint_Handler,
		},
		{
			MethodName: "GetUserImpact",
			Handler:    _ImpactCalculatorService_GetUserImpact_Handler,
		},
		{
			MethodName: "GetGroupImpact",
			Handler:    _ImpactCalculatorService_GetGroupImpact_Handler,
		},
		{
			MethodName: "GetUserLeaderboard",
			Handler:    _ImpactCalculatorService_GetUserLeaderboard_Handler,
		},
		{
			MethodName: "GetGroupLeaderboard",
			Handler:    _ImpactCalculatorService_GetGroupLeaderboard_Handler,
		},
		{
			MethodName: "DonateToCause",
			Handler:    _ImpactCalculatorService_DonateToCause_Handler,
		},
		{
			MethodName: "GetUserDonations",
			Handler:    _ImpactCalculatorService_GetUserDonations_Handler,
		},
		{
			MethodName: "GetDonationCauses",
			Handler:    _ImpactCalculatorService_GetDonationCauses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}

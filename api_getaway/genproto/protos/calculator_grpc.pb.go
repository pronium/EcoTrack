// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: protos/calculator.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ImpactCalculator_CalculateCarbonFootprint_FullMethodName = "/impactcalculator.ImpactCalculator/CalculateCarbonFootprint"
	ImpactCalculator_GetUserImpact_FullMethodName            = "/impactcalculator.ImpactCalculator/GetUserImpact"
	ImpactCalculator_GetGroupImpact_FullMethodName           = "/impactcalculator.ImpactCalculator/GetGroupImpact"
	ImpactCalculator_GetUserLeaderboard_FullMethodName       = "/impactcalculator.ImpactCalculator/GetUserLeaderboard"
	ImpactCalculator_GetGroupLeaderboard_FullMethodName      = "/impactcalculator.ImpactCalculator/GetGroupLeaderboard"
	ImpactCalculator_DonateToCause_FullMethodName            = "/impactcalculator.ImpactCalculator/DonateToCause"
	ImpactCalculator_GetDonationCauses_FullMethodName        = "/impactcalculator.ImpactCalculator/GetDonationCauses"
)

// ImpactCalculatorClient is the client API for ImpactCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImpactCalculatorClient interface {
	CalculateCarbonFootprint(ctx context.Context, in *CalculateCarbonFootprintRequest, opts ...grpc.CallOption) (*CalculateCarbonFootprintResponse, error)
	GetUserImpact(ctx context.Context, in *GetUserImpactRequest, opts ...grpc.CallOption) (*GetUserImpactResponse, error)
	GetGroupImpact(ctx context.Context, in *GetGroupImpactRequest, opts ...grpc.CallOption) (*GetGroupImpactResponse, error)
	GetUserLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	GetGroupLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	DonateToCause(ctx context.Context, in *DonateToCauseRequest, opts ...grpc.CallOption) (*DonateToCauseResponse, error)
	GetDonationCauses(ctx context.Context, in *GetDonationCausesRequest, opts ...grpc.CallOption) (*GetDonationCausesResponse, error)
}

type impactCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewImpactCalculatorClient(cc grpc.ClientConnInterface) ImpactCalculatorClient {
	return &impactCalculatorClient{cc}
}

func (c *impactCalculatorClient) CalculateCarbonFootprint(ctx context.Context, in *CalculateCarbonFootprintRequest, opts ...grpc.CallOption) (*CalculateCarbonFootprintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateCarbonFootprintResponse)
	err := c.cc.Invoke(ctx, ImpactCalculator_CalculateCarbonFootprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorClient) GetUserImpact(ctx context.Context, in *GetUserImpactRequest, opts ...grpc.CallOption) (*GetUserImpactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserImpactResponse)
	err := c.cc.Invoke(ctx, ImpactCalculator_GetUserImpact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorClient) GetGroupImpact(ctx context.Context, in *GetGroupImpactRequest, opts ...grpc.CallOption) (*GetGroupImpactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupImpactResponse)
	err := c.cc.Invoke(ctx, ImpactCalculator_GetGroupImpact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorClient) GetUserLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, ImpactCalculator_GetUserLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorClient) GetGroupLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, ImpactCalculator_GetGroupLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorClient) DonateToCause(ctx context.Context, in *DonateToCauseRequest, opts ...grpc.CallOption) (*DonateToCauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonateToCauseResponse)
	err := c.cc.Invoke(ctx, ImpactCalculator_DonateToCause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactCalculatorClient) GetDonationCauses(ctx context.Context, in *GetDonationCausesRequest, opts ...grpc.CallOption) (*GetDonationCausesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDonationCausesResponse)
	err := c.cc.Invoke(ctx, ImpactCalculator_GetDonationCauses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpactCalculatorServer is the server API for ImpactCalculator service.
// All implementations must embed UnimplementedImpactCalculatorServer
// for forward compatibility
type ImpactCalculatorServer interface {
	CalculateCarbonFootprint(context.Context, *CalculateCarbonFootprintRequest) (*CalculateCarbonFootprintResponse, error)
	GetUserImpact(context.Context, *GetUserImpactRequest) (*GetUserImpactResponse, error)
	GetGroupImpact(context.Context, *GetGroupImpactRequest) (*GetGroupImpactResponse, error)
	GetUserLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	GetGroupLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	DonateToCause(context.Context, *DonateToCauseRequest) (*DonateToCauseResponse, error)
	GetDonationCauses(context.Context, *GetDonationCausesRequest) (*GetDonationCausesResponse, error)
	mustEmbedUnimplementedImpactCalculatorServer()
}

// UnimplementedImpactCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedImpactCalculatorServer struct {
}

func (UnimplementedImpactCalculatorServer) CalculateCarbonFootprint(context.Context, *CalculateCarbonFootprintRequest) (*CalculateCarbonFootprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCarbonFootprint not implemented")
}
func (UnimplementedImpactCalculatorServer) GetUserImpact(context.Context, *GetUserImpactRequest) (*GetUserImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserImpact not implemented")
}
func (UnimplementedImpactCalculatorServer) GetGroupImpact(context.Context, *GetGroupImpactRequest) (*GetGroupImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupImpact not implemented")
}
func (UnimplementedImpactCalculatorServer) GetUserLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLeaderboard not implemented")
}
func (UnimplementedImpactCalculatorServer) GetGroupLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupLeaderboard not implemented")
}
func (UnimplementedImpactCalculatorServer) DonateToCause(context.Context, *DonateToCauseRequest) (*DonateToCauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DonateToCause not implemented")
}
func (UnimplementedImpactCalculatorServer) GetDonationCauses(context.Context, *GetDonationCausesRequest) (*GetDonationCausesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationCauses not implemented")
}
func (UnimplementedImpactCalculatorServer) mustEmbedUnimplementedImpactCalculatorServer() {}

// UnsafeImpactCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpactCalculatorServer will
// result in compilation errors.
type UnsafeImpactCalculatorServer interface {
	mustEmbedUnimplementedImpactCalculatorServer()
}

func RegisterImpactCalculatorServer(s grpc.ServiceRegistrar, srv ImpactCalculatorServer) {
	s.RegisterService(&ImpactCalculator_ServiceDesc, srv)
}

func _ImpactCalculator_CalculateCarbonFootprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCarbonFootprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServer).CalculateCarbonFootprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpactCalculator_CalculateCarbonFootprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServer).CalculateCarbonFootprint(ctx, req.(*CalculateCarbonFootprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculator_GetUserImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserImpactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServer).GetUserImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpactCalculator_GetUserImpact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServer).GetUserImpact(ctx, req.(*GetUserImpactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculator_GetGroupImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupImpactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServer).GetGroupImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpactCalculator_GetGroupImpact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServer).GetGroupImpact(ctx, req.(*GetGroupImpactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculator_GetUserLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServer).GetUserLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpactCalculator_GetUserLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServer).GetUserLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculator_GetGroupLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServer).GetGroupLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpactCalculator_GetGroupLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServer).GetGroupLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculator_DonateToCause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonateToCauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServer).DonateToCause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpactCalculator_DonateToCause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServer).DonateToCause(ctx, req.(*DonateToCauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactCalculator_GetDonationCauses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonationCausesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactCalculatorServer).GetDonationCauses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpactCalculator_GetDonationCauses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactCalculatorServer).GetDonationCauses(ctx, req.(*GetDonationCausesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImpactCalculator_ServiceDesc is the grpc.ServiceDesc for ImpactCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImpactCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impactcalculator.ImpactCalculator",
	HandlerType: (*ImpactCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateCarbonFootprint",
			Handler:    _ImpactCalculator_CalculateCarbonFootprint_Handler,
		},
		{
			MethodName: "GetUserImpact",
			Handler:    _ImpactCalculator_GetUserImpact_Handler,
		},
		{
			MethodName: "GetGroupImpact",
			Handler:    _ImpactCalculator_GetGroupImpact_Handler,
		},
		{
			MethodName: "GetUserLeaderboard",
			Handler:    _ImpactCalculator_GetUserLeaderboard_Handler,
		},
		{
			MethodName: "GetGroupLeaderboard",
			Handler:    _ImpactCalculator_GetGroupLeaderboard_Handler,
		},
		{
			MethodName: "DonateToCause",
			Handler:    _ImpactCalculator_DonateToCause_Handler,
		},
		{
			MethodName: "GetDonationCauses",
			Handler:    _ImpactCalculator_GetDonationCauses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/calculator.proto",
}
